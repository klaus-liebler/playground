// automatically generated by the FlatBuffers compiler, do not modify

import { BooleanSetting } from '../webmanager/boolean-setting';
import { EnumSetting } from '../webmanager/enum-setting';
import { IntegerSetting } from '../webmanager/integer-setting';
import { StringSetting } from '../webmanager/string-setting';


export enum Setting {
  NONE = 0,
  StringSetting = 1,
  IntegerSetting = 2,
  BooleanSetting = 3,
  EnumSetting = 4
}

export function unionToSetting(
  type: Setting,
  accessor: (obj:BooleanSetting|EnumSetting|IntegerSetting|StringSetting) => BooleanSetting|EnumSetting|IntegerSetting|StringSetting|null
): BooleanSetting|EnumSetting|IntegerSetting|StringSetting|null {
  switch(Setting[type]) {
    case 'NONE': return null; 
    case 'StringSetting': return accessor(new StringSetting())! as StringSetting;
    case 'IntegerSetting': return accessor(new IntegerSetting())! as IntegerSetting;
    case 'BooleanSetting': return accessor(new BooleanSetting())! as BooleanSetting;
    case 'EnumSetting': return accessor(new EnumSetting())! as EnumSetting;
    default: return null;
  }
}

export function unionListToSetting(
  type: Setting, 
  accessor: (index: number, obj:BooleanSetting|EnumSetting|IntegerSetting|StringSetting) => BooleanSetting|EnumSetting|IntegerSetting|StringSetting|null, 
  index: number
): BooleanSetting|EnumSetting|IntegerSetting|StringSetting|null {
  switch(Setting[type]) {
    case 'NONE': return null; 
    case 'StringSetting': return accessor(index, new StringSetting())! as StringSetting;
    case 'IntegerSetting': return accessor(index, new IntegerSetting())! as IntegerSetting;
    case 'BooleanSetting': return accessor(index, new BooleanSetting())! as BooleanSetting;
    case 'EnumSetting': return accessor(index, new EnumSetting())! as EnumSetting;
    default: return null;
  }
}
