// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Setting, unionToSetting, unionListToSetting } from '../webmanager/setting';


export class SettingWrapper {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SettingWrapper {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSettingWrapper(bb:flatbuffers.ByteBuffer, obj?:SettingWrapper):SettingWrapper {
  return (obj || new SettingWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSettingWrapper(bb:flatbuffers.ByteBuffer, obj?:SettingWrapper):SettingWrapper {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SettingWrapper()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

settingKey():string|null
settingKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
settingKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

settingType():Setting {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Setting.NONE;
}

setting<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startSettingWrapper(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addSettingKey(builder:flatbuffers.Builder, settingKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, settingKeyOffset, 0);
}

static addSettingType(builder:flatbuffers.Builder, settingType:Setting) {
  builder.addFieldInt8(1, settingType, Setting.NONE);
}

static addSetting(builder:flatbuffers.Builder, settingOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, settingOffset, 0);
}

static endSettingWrapper(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSettingWrapper(builder:flatbuffers.Builder, settingKeyOffset:flatbuffers.Offset, settingType:Setting, settingOffset:flatbuffers.Offset):flatbuffers.Offset {
  SettingWrapper.startSettingWrapper(builder);
  SettingWrapper.addSettingKey(builder, settingKeyOffset);
  SettingWrapper.addSettingType(builder, settingType);
  SettingWrapper.addSetting(builder, settingOffset);
  return SettingWrapper.endSettingWrapper(builder);
}
}
