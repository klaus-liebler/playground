// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ResponseWifiConnectSuccessful {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseWifiConnectSuccessful {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseWifiConnectSuccessful(bb:flatbuffers.ByteBuffer, obj?:ResponseWifiConnectSuccessful):ResponseWifiConnectSuccessful {
  return (obj || new ResponseWifiConnectSuccessful()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseWifiConnectSuccessful(bb:flatbuffers.ByteBuffer, obj?:ResponseWifiConnectSuccessful):ResponseWifiConnectSuccessful {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseWifiConnectSuccessful()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ssid():string|null
ssid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ssid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ip():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

netmask():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

gateway():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

rssi():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startResponseWifiConnectSuccessful(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addSsid(builder:flatbuffers.Builder, ssidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ssidOffset, 0);
}

static addIp(builder:flatbuffers.Builder, ip:number) {
  builder.addFieldInt32(1, ip, 0);
}

static addNetmask(builder:flatbuffers.Builder, netmask:number) {
  builder.addFieldInt32(2, netmask, 0);
}

static addGateway(builder:flatbuffers.Builder, gateway:number) {
  builder.addFieldInt32(3, gateway, 0);
}

static addRssi(builder:flatbuffers.Builder, rssi:number) {
  builder.addFieldInt8(4, rssi, 0);
}

static endResponseWifiConnectSuccessful(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponseWifiConnectSuccessful(builder:flatbuffers.Builder, ssidOffset:flatbuffers.Offset, ip:number, netmask:number, gateway:number, rssi:number):flatbuffers.Offset {
  ResponseWifiConnectSuccessful.startResponseWifiConnectSuccessful(builder);
  ResponseWifiConnectSuccessful.addSsid(builder, ssidOffset);
  ResponseWifiConnectSuccessful.addIp(builder, ip);
  ResponseWifiConnectSuccessful.addNetmask(builder, netmask);
  ResponseWifiConnectSuccessful.addGateway(builder, gateway);
  ResponseWifiConnectSuccessful.addRssi(builder, rssi);
  return ResponseWifiConnectSuccessful.endResponseWifiConnectSuccessful(builder);
}
}
