// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class ResponseSetUserSettings {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseSetUserSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseSetUserSettings(bb:flatbuffers.ByteBuffer, obj?:ResponseSetUserSettings):ResponseSetUserSettings {
  return (obj || new ResponseSetUserSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseSetUserSettings(bb:flatbuffers.ByteBuffer, obj?:ResponseSetUserSettings):ResponseSetUserSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseSetUserSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

groupKey():string|null
groupKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
groupKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

settingKeys(index: number):string
settingKeys(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
settingKeys(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

settingKeysLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startResponseSetUserSettings(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGroupKey(builder:flatbuffers.Builder, groupKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, groupKeyOffset, 0);
}

static addSettingKeys(builder:flatbuffers.Builder, settingKeysOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, settingKeysOffset, 0);
}

static createSettingKeysVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSettingKeysVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endResponseSetUserSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponseSetUserSettings(builder:flatbuffers.Builder, groupKeyOffset:flatbuffers.Offset, settingKeysOffset:flatbuffers.Offset):flatbuffers.Offset {
  ResponseSetUserSettings.startResponseSetUserSettings(builder);
  ResponseSetUserSettings.addGroupKey(builder, groupKeyOffset);
  ResponseSetUserSettings.addSettingKeys(builder, settingKeysOffset);
  return ResponseSetUserSettings.endResponseSetUserSettings(builder);
}
}
