// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class NotifyFingerDetected {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):NotifyFingerDetected {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsNotifyFingerDetected(bb:flatbuffers.ByteBuffer, obj?:NotifyFingerDetected):NotifyFingerDetected {
  return (obj || new NotifyFingerDetected()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsNotifyFingerDetected(bb:flatbuffers.ByteBuffer, obj?:NotifyFingerDetected):NotifyFingerDetected {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new NotifyFingerDetected()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

errorcode():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

score():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

static startNotifyFingerDetected(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addErrorcode(builder:flatbuffers.Builder, errorcode:number) {
  builder.addFieldInt16(0, errorcode, 0);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(1, index, 0);
}

static addScore(builder:flatbuffers.Builder, score:number) {
  builder.addFieldInt8(2, score, 0);
}

static endNotifyFingerDetected(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createNotifyFingerDetected(builder:flatbuffers.Builder, errorcode:number, index:number, score:number):flatbuffers.Offset {
  NotifyFingerDetected.startNotifyFingerDetected(builder);
  NotifyFingerDetected.addErrorcode(builder, errorcode);
  NotifyFingerDetected.addIndex(builder, index);
  NotifyFingerDetected.addScore(builder, score);
  return NotifyFingerDetected.endNotifyFingerDetected(builder);
}
}
