// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { TimeGranularity } from '../webmanager/time-granularity';


export class RequestTimeseries {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestTimeseries {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestTimeseries(bb:flatbuffers.ByteBuffer, obj?:RequestTimeseries):RequestTimeseries {
  return (obj || new RequestTimeseries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestTimeseries(bb:flatbuffers.ByteBuffer, obj?:RequestTimeseries):RequestTimeseries {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestTimeseries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

granularity():TimeGranularity {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : TimeGranularity.TEN_SECONDS;
}

offset():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startRequestTimeseries(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGranularity(builder:flatbuffers.Builder, granularity:TimeGranularity) {
  builder.addFieldInt8(0, granularity, TimeGranularity.TEN_SECONDS);
}

static addOffset(builder:flatbuffers.Builder, offset:number) {
  builder.addFieldInt32(1, offset, 0);
}

static endRequestTimeseries(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestTimeseries(builder:flatbuffers.Builder, granularity:TimeGranularity, offset:number):flatbuffers.Offset {
  RequestTimeseries.startRequestTimeseries(builder);
  RequestTimeseries.addGranularity(builder, granularity);
  RequestTimeseries.addOffset(builder, offset);
  return RequestTimeseries.endRequestTimeseries(builder);
}
}
