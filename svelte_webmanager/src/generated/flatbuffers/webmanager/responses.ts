// automatically generated by the FlatBuffers compiler, do not modify

import { NotifyCanMessage } from '../webmanager/notify-can-message';
import { NotifyEnrollNewFinger } from '../webmanager/notify-enroll-new-finger';
import { NotifyFingerDetected } from '../webmanager/notify-finger-detected';
import { NotifyLiveLogItem } from '../webmanager/notify-live-log-item';
import { ResponseCancelInstruction } from '../webmanager/response-cancel-instruction';
import { ResponseDeleteAllFingers } from '../webmanager/response-delete-all-fingers';
import { ResponseDeleteFinger } from '../webmanager/response-delete-finger';
import { ResponseEnrollNewFinger } from '../webmanager/response-enroll-new-finger';
import { ResponseFingerprintSensorInfo } from '../webmanager/response-fingerprint-sensor-info';
import { ResponseFingers } from '../webmanager/response-fingers';
import { ResponseGetUserSettings } from '../webmanager/response-get-user-settings';
import { ResponseJournal } from '../webmanager/response-journal';
import { ResponseNetworkInformation } from '../webmanager/response-network-information';
import { ResponseRenameFinger } from '../webmanager/response-rename-finger';
import { ResponseSetUserSettings } from '../webmanager/response-set-user-settings';
import { ResponseSystemData } from '../webmanager/response-system-data';
import { ResponseTimeseriesDummy } from '../webmanager/response-timeseries-dummy';
import { ResponseWifiConnectFailed } from '../webmanager/response-wifi-connect-failed';
import { ResponseWifiConnectSuccessful } from '../webmanager/response-wifi-connect-successful';
import { ResponseWifiDisconnect } from '../webmanager/response-wifi-disconnect';


export enum Responses {
  NONE = 0,
  NotifyCanMessage = 1,
  NotifyLiveLogItem = 2,
  ResponseNetworkInformation = 3,
  ResponseWifiConnectSuccessful = 4,
  ResponseWifiConnectFailed = 5,
  ResponseWifiDisconnect = 6,
  ResponseSystemData = 7,
  ResponseJournal = 8,
  ResponseGetUserSettings = 9,
  ResponseSetUserSettings = 10,
  ResponseTimeseriesDummy = 11,
  ResponseEnrollNewFinger = 12,
  NotifyEnrollNewFinger = 13,
  NotifyFingerDetected = 14,
  ResponseDeleteFinger = 15,
  ResponseRenameFinger = 16,
  ResponseFingerprintSensorInfo = 17,
  ResponseDeleteAllFingers = 18,
  ResponseFingers = 19,
  ResponseCancelInstruction = 20
}

export function unionToResponses(
  type: Responses,
  accessor: (obj:NotifyCanMessage|NotifyEnrollNewFinger|NotifyFingerDetected|NotifyLiveLogItem|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerprintSensorInfo|ResponseFingers|ResponseGetUserSettings|ResponseJournal|ResponseNetworkInformation|ResponseRenameFinger|ResponseSetUserSettings|ResponseSystemData|ResponseTimeseriesDummy|ResponseWifiConnectFailed|ResponseWifiConnectSuccessful|ResponseWifiDisconnect) => NotifyCanMessage|NotifyEnrollNewFinger|NotifyFingerDetected|NotifyLiveLogItem|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerprintSensorInfo|ResponseFingers|ResponseGetUserSettings|ResponseJournal|ResponseNetworkInformation|ResponseRenameFinger|ResponseSetUserSettings|ResponseSystemData|ResponseTimeseriesDummy|ResponseWifiConnectFailed|ResponseWifiConnectSuccessful|ResponseWifiDisconnect|null
): NotifyCanMessage|NotifyEnrollNewFinger|NotifyFingerDetected|NotifyLiveLogItem|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerprintSensorInfo|ResponseFingers|ResponseGetUserSettings|ResponseJournal|ResponseNetworkInformation|ResponseRenameFinger|ResponseSetUserSettings|ResponseSystemData|ResponseTimeseriesDummy|ResponseWifiConnectFailed|ResponseWifiConnectSuccessful|ResponseWifiDisconnect|null {
  switch(Responses[type]) {
    case 'NONE': return null; 
    case 'NotifyCanMessage': return accessor(new NotifyCanMessage())! as NotifyCanMessage;
    case 'NotifyLiveLogItem': return accessor(new NotifyLiveLogItem())! as NotifyLiveLogItem;
    case 'ResponseNetworkInformation': return accessor(new ResponseNetworkInformation())! as ResponseNetworkInformation;
    case 'ResponseWifiConnectSuccessful': return accessor(new ResponseWifiConnectSuccessful())! as ResponseWifiConnectSuccessful;
    case 'ResponseWifiConnectFailed': return accessor(new ResponseWifiConnectFailed())! as ResponseWifiConnectFailed;
    case 'ResponseWifiDisconnect': return accessor(new ResponseWifiDisconnect())! as ResponseWifiDisconnect;
    case 'ResponseSystemData': return accessor(new ResponseSystemData())! as ResponseSystemData;
    case 'ResponseJournal': return accessor(new ResponseJournal())! as ResponseJournal;
    case 'ResponseGetUserSettings': return accessor(new ResponseGetUserSettings())! as ResponseGetUserSettings;
    case 'ResponseSetUserSettings': return accessor(new ResponseSetUserSettings())! as ResponseSetUserSettings;
    case 'ResponseTimeseriesDummy': return accessor(new ResponseTimeseriesDummy())! as ResponseTimeseriesDummy;
    case 'ResponseEnrollNewFinger': return accessor(new ResponseEnrollNewFinger())! as ResponseEnrollNewFinger;
    case 'NotifyEnrollNewFinger': return accessor(new NotifyEnrollNewFinger())! as NotifyEnrollNewFinger;
    case 'NotifyFingerDetected': return accessor(new NotifyFingerDetected())! as NotifyFingerDetected;
    case 'ResponseDeleteFinger': return accessor(new ResponseDeleteFinger())! as ResponseDeleteFinger;
    case 'ResponseRenameFinger': return accessor(new ResponseRenameFinger())! as ResponseRenameFinger;
    case 'ResponseFingerprintSensorInfo': return accessor(new ResponseFingerprintSensorInfo())! as ResponseFingerprintSensorInfo;
    case 'ResponseDeleteAllFingers': return accessor(new ResponseDeleteAllFingers())! as ResponseDeleteAllFingers;
    case 'ResponseFingers': return accessor(new ResponseFingers())! as ResponseFingers;
    case 'ResponseCancelInstruction': return accessor(new ResponseCancelInstruction())! as ResponseCancelInstruction;
    default: return null;
  }
}

export function unionListToResponses(
  type: Responses, 
  accessor: (index: number, obj:NotifyCanMessage|NotifyEnrollNewFinger|NotifyFingerDetected|NotifyLiveLogItem|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerprintSensorInfo|ResponseFingers|ResponseGetUserSettings|ResponseJournal|ResponseNetworkInformation|ResponseRenameFinger|ResponseSetUserSettings|ResponseSystemData|ResponseTimeseriesDummy|ResponseWifiConnectFailed|ResponseWifiConnectSuccessful|ResponseWifiDisconnect) => NotifyCanMessage|NotifyEnrollNewFinger|NotifyFingerDetected|NotifyLiveLogItem|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerprintSensorInfo|ResponseFingers|ResponseGetUserSettings|ResponseJournal|ResponseNetworkInformation|ResponseRenameFinger|ResponseSetUserSettings|ResponseSystemData|ResponseTimeseriesDummy|ResponseWifiConnectFailed|ResponseWifiConnectSuccessful|ResponseWifiDisconnect|null, 
  index: number
): NotifyCanMessage|NotifyEnrollNewFinger|NotifyFingerDetected|NotifyLiveLogItem|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerprintSensorInfo|ResponseFingers|ResponseGetUserSettings|ResponseJournal|ResponseNetworkInformation|ResponseRenameFinger|ResponseSetUserSettings|ResponseSystemData|ResponseTimeseriesDummy|ResponseWifiConnectFailed|ResponseWifiConnectSuccessful|ResponseWifiDisconnect|null {
  switch(Responses[type]) {
    case 'NONE': return null; 
    case 'NotifyCanMessage': return accessor(index, new NotifyCanMessage())! as NotifyCanMessage;
    case 'NotifyLiveLogItem': return accessor(index, new NotifyLiveLogItem())! as NotifyLiveLogItem;
    case 'ResponseNetworkInformation': return accessor(index, new ResponseNetworkInformation())! as ResponseNetworkInformation;
    case 'ResponseWifiConnectSuccessful': return accessor(index, new ResponseWifiConnectSuccessful())! as ResponseWifiConnectSuccessful;
    case 'ResponseWifiConnectFailed': return accessor(index, new ResponseWifiConnectFailed())! as ResponseWifiConnectFailed;
    case 'ResponseWifiDisconnect': return accessor(index, new ResponseWifiDisconnect())! as ResponseWifiDisconnect;
    case 'ResponseSystemData': return accessor(index, new ResponseSystemData())! as ResponseSystemData;
    case 'ResponseJournal': return accessor(index, new ResponseJournal())! as ResponseJournal;
    case 'ResponseGetUserSettings': return accessor(index, new ResponseGetUserSettings())! as ResponseGetUserSettings;
    case 'ResponseSetUserSettings': return accessor(index, new ResponseSetUserSettings())! as ResponseSetUserSettings;
    case 'ResponseTimeseriesDummy': return accessor(index, new ResponseTimeseriesDummy())! as ResponseTimeseriesDummy;
    case 'ResponseEnrollNewFinger': return accessor(index, new ResponseEnrollNewFinger())! as ResponseEnrollNewFinger;
    case 'NotifyEnrollNewFinger': return accessor(index, new NotifyEnrollNewFinger())! as NotifyEnrollNewFinger;
    case 'NotifyFingerDetected': return accessor(index, new NotifyFingerDetected())! as NotifyFingerDetected;
    case 'ResponseDeleteFinger': return accessor(index, new ResponseDeleteFinger())! as ResponseDeleteFinger;
    case 'ResponseRenameFinger': return accessor(index, new ResponseRenameFinger())! as ResponseRenameFinger;
    case 'ResponseFingerprintSensorInfo': return accessor(index, new ResponseFingerprintSensorInfo())! as ResponseFingerprintSensorInfo;
    case 'ResponseDeleteAllFingers': return accessor(index, new ResponseDeleteAllFingers())! as ResponseDeleteAllFingers;
    case 'ResponseFingers': return accessor(index, new ResponseFingers())! as ResponseFingers;
    case 'ResponseCancelInstruction': return accessor(index, new ResponseCancelInstruction())! as ResponseCancelInstruction;
    default: return null;
  }
}
