// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class MessagePayload {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MessagePayload {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

p(index: number):number|null {
    return this.bb!.readUint8(this.bb_pos + 0 + index);
}

static sizeOf():number {
  return 8;
}

static createMessagePayload(builder:flatbuffers.Builder, p: number[]|null):flatbuffers.Offset {
  builder.prep(1, 8);

  for (let i = 7; i >= 0; --i) {
    builder.writeInt8((p?.[i] ?? 0));

  }

  return builder.offset();
}

}
